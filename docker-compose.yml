version: '3.9'

services:
  # Backend service (FastAPI API only)
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: backend
    volumes:
      - ./backend:/app/backend
      - ./backend/models:/app/backend/models
    environment:
      - PYTHONPATH=/app
      - OLLAMA_BASE_URL=http://llm:11434
      - DATABASE_URL=postgresql://user:password@db:5432/anomalies  # optional
    ports:
      - "8000:8000"
    command: uvicorn api:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jupyter service (separate from backend)
  jupyter:
    build:
      context: .
      dockerfile: backend/Dockerfile.dev
    container_name: jupyter
    working_dir: /app/backend
    command: >
      sh -c "jupyter notebook --ip=0.0.0.0 --port=8888
      --no-browser --allow-root
      --NotebookApp.token=dev
      --notebook-dir=./notebooks"
    ports:
      - "8888:8888"
    volumes:
      - ./backend:/app/backend
    environment:
      - PYTHONPATH=/app
    depends_on:
      - backend
    restart: unless-stopped

  # Frontend service (React + Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    environment:
      - VITE_API_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped

  # LLM service (Ollama)
  llm:
    image: ollama/ollama:latest
    container_name: llm
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    entrypoint: "/bin/sh"
    command: >
      -c "ollama serve &
         sleep 5 &&
         ollama pull mistral &&
         tail -f /dev/null"
    restart: unless-stopped

  # Optional Postgres for anomaly storage
  db:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: anomalies
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d anomalies"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  ollama_data:
  postgres_data:
